
/**
 * Class implementing a basic cache with a configurable size and associativity.
 * 
 * The cache is backed-up by a "Memory" object which actually stores stores the
 * values -- on a cache miss, the Memory should be accessed.
 * 
 */
public class Cache implements ReadOnlyCache {

	// data structures- variables to be used in cache and out of
	private Memory m_memory;
	private int blockCount;
	private int bytesPerBlock;
	private int associativity;
	private int[] tags;
	private boolean[] Valid;
	private byte[][] data;

	/**
	 * Constructor
	 * 
	 * @param memory        - An object implementing the Memory functionality. This
	 *                      should be accessed on a cache miss
	 * @param blockCount    - The number of blocks in the cache.
	 * @param bytesPerBlock - The number of bytes per block in the cache.
	 * @param associativity - The associativity of the cache. 1 means direct mapped,
	 *                      and a value of "blockCount" means fully-associative.
	 */

	public Cache(Memory memory, int blockCount, int bytesPerBlock, int associativity) {
		m_memory = memory;
		this.blockCount = blockCount;
		this.bytesPerBlock = bytesPerBlock;
		this.associativity = associativity;
		Valid = new boolean[blockCount];
		tags = new int[blockCount];
		data = new byte[blockCount][bytesPerBlock];
	}

	/**
	 * Method to retrieve the value of the specified memory location.
	 * 
	 * @param address - The address of the byte to be retrieved.
	 * @return The value at the specified address.
	 */
	public byte load(int address) {

		// Direct Mapped

		int offsetBits = Cache.offset(address, this.bytesPerBlock);

		int indexbits = Cache.index(address, this.bytesPerBlock, this.blockCount);

		int blockAdress = address - offsetBits;

		int tagBits = Cache.tag(address, this.bytesPerBlock, this.blockCount);

		// direct Mapping and  Set Associative/Full Associative

		// Checking for either a hit or miss and validiity

		// HIT~!
		if (tags[indexbits] != tagBits || Valid[indexbits] == false) {

			Valid[indexbits] = true;
			tags[indexbits] = tagBits;
			data[indexbits] = m_memory.read(blockAdress, bytesPerBlock);
			return data[indexbits][offsetBits];
		}

		// return value

		return data[indexbits][offsetBits];
	}

	// helper method for index
	public static int index(int address, int bytesperblock, int blockcount) {

		int temp = address / bytesperblock;

		return temp % blockcount;

	}

	// helper method for offset
	public static int offset(int address, int bytesperblock) {

		return (address % bytesperblock);

	}

	// helper method for tag
	public static int tag(int address, int bytesperblock, int blockcount) {

		int temp = address / bytesperblock;
		return temp / blockcount;

	}
}
